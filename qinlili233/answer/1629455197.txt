北京一特斯拉发生撞楼事故，车主自述突然失控，事故的原因究竟是什么？为什么特斯拉频发自动驾驶事故？
<p data-pid="8IqdM9nN">从程序的角度聊聊特斯拉为什么每次都说数据没有问题</p><p data-pid="j-7YOlBk">特斯拉能拿到数据说明车子肯定在打log，然后log回传</p><p data-pid="K4V7vuV2">我们就以js举例，毕竟spacex用的都是cef套壳，弄不好特斯拉也用了cef</p><p data-pid="gvhR2wzF">假设现在有一个存在问题的方法function makeError()</p><p data-pid="WrAlFF9c">代码的顺序执行决定了打log必须在方法执行之前/之后</p><blockquote data-pid="I1xJlTcq">makeError();<br>console.log("一切正常");</blockquote><p data-pid="1S_KQCzM">这是第一种写法，log在方法后，如果方法出问题了，那么抛出异常后log根本不会打出来</p><blockquote data-pid="bnr15nZG">console.log("一切正常");<br>makeError();</blockquote><p data-pid="epasW5To">这是第二种写法，log在方法前，也就是方法还没执行，log已经打出了，方法出错了log也看不出问题</p><p><br></p><p data-pid="xotbHOD0">特斯拉很可能采用了第二种打log的写法，所以哪怕下面的方法都抛异常了，log还是一切正常</p><p><br></p><p data-pid="H3b_dcaq">但众所周知，抛异常后下面的方法是不会被继续执行的</p><p data-pid="KfTgZMyL">但是特斯拉突然加速了</p><p data-pid="rMlZQEwb">所以我大概推测下来特斯拉应该有这么一段代码存在隐形问题</p><blockquote data-pid="GwOMBi2K">console.log("execute method xxx");<br>try{<br>var methodResult=makeError();//获取是否限制加速，但这个方法可能出错<br>}catch{}<br>if(!methodResult){//如果返回结果为false则加速<br>doAccelerate();//加速<br>}<br><br>var makeError =function(){<br>if(一个可能抛出异常的判断条件){return true}else{return false}<br>}<br>var doAccelerate =function(){<br>pressYoumenDown();//执行踩油门加速<br>}</blockquote><p data-pid="eOTRXptP">这段代码在一切正常执行时可以正常决定是否加速</p><p data-pid="IRzXdDD-">但是，如果方法makeError抛出错误，就会因为methodResult值根本没定义而错误的加速</p><p data-pid="DHgLTHFW">至于为什么会抛出错误嘛，特斯拉换到自研v3版自动驾驶硬件时，没用ecc内存（v2.5nvidia版是ecc内存）</p><p><br></p><p data-pid="lNAUBQe1">这个问题其实很好解决，不要返回布尔值，返回数字1或2来判断，就可以避免变量未定义导致if错判的问题了</p><hr><h2>更新：草了，还真是cef套壳</h2><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-08c69787897c8ede6bb12177219c9792_720w.jpg?source=3af55fa1" data-rawwidth="1080" data-rawheight="2340" data-size="normal" data-default-watermark-src="https://pica.zhimg.com/v2-5b04e33404e459eabd0f75db0f9d5022_720w.jpg?source=3af55fa1" class="origin_image zh-lightbox-thumb" width="1080" data-original="https://pic3.zhimg.com/v2-08c69787897c8ede6bb12177219c9792_r.jpg?source=3af55fa1"></noscript><img src="data:image/svg+xml;utf8,&lt;svg%20xmlns='http://www.w3.org/2000/svg'%20width='1080'%20height='2340'&gt;&lt;/svg&gt;" data-rawwidth="1080" data-rawheight="2340" data-size="normal" data-default-watermark-src="https://pica.zhimg.com/v2-5b04e33404e459eabd0f75db0f9d5022_720w.jpg?source=3af55fa1" class="origin_image zh-lightbox-thumb lazy" width="1080" data-original="https://pic3.zhimg.com/v2-08c69787897c8ede6bb12177219c9792_r.jpg?source=3af55fa1" data-actualsrc="https://pic2.zhimg.com/v2-08c69787897c8ede6bb12177219c9792_720w.jpg?source=3af55fa1"></figure><p></p>
1608095420