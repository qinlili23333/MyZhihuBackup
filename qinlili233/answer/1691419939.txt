如何评价平头哥完成了安卓 10 对 RISC-V 的移植并开源代码？对 RISC-V 生态有何意义？
<p data-pid="iALzgLGT">粗略翻了翻开源repo</p><p data-pid="Vgg64g6T">对android开发者来说，app适配riscv又是一个新的难点，而且主要难点在于清理屎山的问题</p><p data-pid="-wS7kNBU">对于传统打包的新项目，把repo里修改过的ndk覆盖下来自己在arch里加个riscv64就行，没什么难度（等win版的修改后ndk有了我应该有办法第一时间把我自己的app适配上）</p><p data-pid="V9dzjG33">但对于一些代码里判断架构动态加载lib的屎山来说，有点麻烦。因为mips很早就退出android了，所以目前android只有arm和x86两大体系，于是很多屎山里就和传统二元性别一样，非a即x，检测到不是x86，就直接判断是arm了，于是这种代码在riscv设备上就必然会歇逼</p><p><br></p><p data-pid="0ZWK_UVe">所以借着这个回答，再次谈一些关于规范开发的事情</p><h2>0x0 我需要怎么规范的适配riscv？</h2><p data-pid="jFxLuLWi">如果你的项目完全使用静态的loadlibrary来加载so库，那么恭喜你，你只要在ndk和项目打包的mk文件里加上riscv64支持就好了，就和你当初适配64位一样简单。但你仍然要检查native部分代码是否针对架构有挖坑，尤其是加固类</p><p data-pid="EyYzbiDH">如果你的项目根本没有native库，且不存在写死路径来加载系统集成库的情况，也恭喜你，你什么也不用做</p><p data-pid="-WH-nMDO">如果你的项目涉及动态加载库，那么很遗憾，你需要多花点精力了。你需要检查并修改你的动态加载的检测架构部分，如果你正在使用arm/x86的二元变量判断，你需要修改你的判断逻辑，加入riscv的支持。（不推荐改屎山，建议直接重构这部分）</p><h2>0x1 怎样让以后经历此类适配时更轻松</h2><p data-pid="O0ZLlWSD">首先第一个原则就是减少对native库的依赖，能不用就不用</p><p data-pid="Chy3aDud">其次就是要减少非a即b式的有限排除判断，你永远不知道你的项目将来需要如何拓展，所以尽可能少给自己挖坑</p><p data-pid="vaY4RNoj">最后一个重要的开发哲学就是把能丢给系统的丢给系统，你看11的存储变更害死多少自己写图库轮子的app，用系统图库选择的却都活着，让系统帮你做适配可以极大的减少你的负担</p><h2>0x2 我该什么时候开始着手适配</h2><p data-pid="G973KV5c">现在，就是现在！</p><p data-pid="k7KbdvB5">虽然不需要让你的app现在就能在riscv设备上跑起来，但你应该从现在开始检查屎山隐患，并在新项目上做出预留。屎山留的越久，重构就越困难。你可以开始计划对相对稳定不再需要大规模更新的模块独立分支进行重构，与现有版本的稳定性升级独立开来。</p><p></p><p></p><p></p>
1611293328