GPU 转码效果为什么不如纯 CPU？
<p data-pid="Alx96wUs">就算用CUDA Encoder而不是NVENC，显卡输出画质同码率下也不如纯CPU</p><p data-pid="b8rCsMlU">主要问题在于batchsize</p><p><br></p><p data-pid="zn_7PSvr">视频编码要尽可能优化效率，那就要尽可能深的向前后扫描变化不大的部分，扫描复杂度越高，扫描范围越大，耗时也就越长</p><p data-pid="z3DOLl2r">而编码器的多核优化，本质上是把不同的帧分配给了不同的核心</p><p data-pid="VH5S15By">那么这就产生了两个问题，一个是GPU单个流水线的性能肯定是不如CPU单核的，另一个是显存容量非常有限但GPU流水线非常多</p><p><br></p><p data-pid="m1LOLigV">我们都知道，这种把不同部分分配给不同核心的多核优化思路，核心越多占用内存越大，就好比7zip，1线程和4线程内存消耗就有差别</p><p data-pid="BYDyddoj">那么现在GPU流水线那么多，比如有2560流水线，却只有8G显存，假设2560流水线全部工作，每个流水线能分配到的显存就仅有最多3.2M</p><p data-pid="2Ri8PoPP">你说这么点显存能干多少活？</p><p><br></p><p data-pid="gmk_NNo4">所以GPU编码往往采取非常小的batchsize，不但编码扫描深度小，而且甚至可能会把一个画面分成n个部分分给每个流水线，比如一个1600x900的视频，他可以分为16个400x225的画面送入16个流水线</p><p><br></p><p data-pid="qDXHNhyP">batchsize越大，扫描的范围越大，必然可以用更低的码率实现同样的画质，而CPU编码较大的batchsize决定了画质较好，尤其在高分辨率视频上非常明显</p><p><br></p><p data-pid="Q9rsST74">我们不妨举个极端一点的例子，一个完全纯白的60帧视频。如果是CPU来实现，由于单线程可以轻松吃掉2g+的内存，可以扫描整个画面前后1秒的范围，所以最后得到的编码结果就是“全部纯白，60帧”，这个体积显然是非常小的。但如果是GPU编码，由于每条流水线能分到20m都算万幸（目前显存最大的A100，80g显存6912流水线，平均到每流水线也只有11.8m），可别忘了在显存里塞的可是完全无损未压缩的画面，20m只能存放400x225 10bit下的60帧，所以每个流水线输出的就是“在这个400x225范围内，全部纯白，60帧”，最后把数个这样的结果拼起来才得到完整视频，那么这个视频的体积就是CPU编码的数倍。</p><p data-pid="XpXBfCnK">那么，我们有没有办法结合CPU的高质量和GPU的高速度呢？其实是完全可以的。如果我们使用2pass编码，第一轮使用GPU快处理用于收集信息，第二轮交给CPU生成最终流，那么比直接使用CPU速度更快（profile引导下的编码肯定是更快的），质量又远超GPU编码（因为最终流由CPU生成）</p><p data-pid="rW3vRyes">当然，2pass有个非常致命的问题，没有实时性，不适应于直播流，这也是目前直播普遍码率高而画质差的原因，直播不能容忍编码延迟</p><p><br></p><p data-pid="GoAGfN_4">当然，目前的GPU编码很少有能完全利用流水线的，表现为大部分时候显卡负载都上不去，但尽管如此，GPU编码对显存的需求仍然只能用恐怖形容，x264使用opencl加速（而非纯GPU编码）1080p视频就需要近2g显存消耗，却只能占用3060大约10%性能，换句话说就是只有10%左右流水线在工作。</p>
1643939265